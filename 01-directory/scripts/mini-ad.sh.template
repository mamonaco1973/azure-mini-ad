#!/bin/bash

#--------------------------------------------------------------------
# Load configuration variables from environment
#--------------------------------------------------------------------
REALM="${REALM}"
DNS_ZONE="${DNS_ZONE}"
NETBIOS="${NETBIOS}"
HOSTNAME_DC="${HOSTNAME_DC}"
ADMINISTRATOR_PASS="${ADMINISTRATOR_PASS}"
ADMIN_USER_PASS="${ADMIN_USER_PASS}"
VAULT_NAME="${VAULT_NAME}"

#--------------------------------------------------------------------
# Install necessary packages for Active Directory Domain Controller
#--------------------------------------------------------------------

export DEBIAN_FRONTEND=noninteractive
apt-get update >> /root/userdata.log 2>&1
apt-get install -y samba krb5-user winbind smbclient dnsutils acl attr chrony unzip ldb-tools >> /root/userdata.log 2>&1

# ---------------------------------------------------------------------------------
# Install AZ CLI
# ---------------------------------------------------------------------------------

curl -sL https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor | tee /etc/apt/keyrings/microsoft-azure-cli-archive-keyring.gpg > /dev/null
AZ_REPO=$(lsb_release -cs)
echo "deb [signed-by=/etc/apt/keyrings/microsoft-azure-cli-archive-keyring.gpg] https://packages.microsoft.com/repos/azure-cli/ $AZ_REPO main" \
    | tee /etc/apt/sources.list.d/azure-cli.list
apt-get update -y
apt-get install -y azure-cli

#--------------------------------------------------------------------
# Signal that mini-AD initialization is not complete
#--------------------------------------------------------------------

az keyvault secret set \
  --vault-name "$VAULT_NAME" \
  --name "initialized-${DNS_ZONE}" \
  --value "false"

#--------------------------------------------------------------------
# Prepare secrets file with restrictive permissions
#--------------------------------------------------------------------
SECRETS_FILE="/root/ad-secrets.txt"
mkdir -p /root
: > "$SECRETS_FILE"
chmod 600 "$SECRETS_FILE"

#--------------------------------------------------------------------
# Prevent cloud-init from altering the hostname
#--------------------------------------------------------------------
mkdir -p /etc/cloud/cloud.cfg.d
cat > /etc/cloud/cloud.cfg.d/99-preserve-hostname.cfg <<EOF
preserve_hostname: true
EOF

#--------------------------------------------------------------------
# Set the appropriate hostname for the Domain Controller
#--------------------------------------------------------------------
hostnamectl set-hostname "$HOSTNAME_DC"

#--------------------------------------------------------------------
# Determine the primary private IPv4 address and update /etc/hosts
#--------------------------------------------------------------------
IPV4=$(hostname -I | awk '{print $1}')
sed -i "/\b${HOSTNAME_DC}\b/d" /etc/hosts || true
echo "$IPV4  ${HOSTNAME_DC}.${DNS_ZONE} ${HOSTNAME_DC}" >> /etc/hosts

#--------------------------------------------------------------------
# Preconfigure Kerberos to prevent interactive prompts during install
#--------------------------------------------------------------------

debconf-set-selections <<< "krb5-config krb5-config/default_realm string ${REALM}"
debconf-set-selections <<< "krb5-config krb5-config/kerberos_servers string"
debconf-set-selections <<< "krb5-config krb5-config/admin_server string"

#--------------------------------------------------------------------
# Configure Chrony to sync with AWS Time Sync service
#--------------------------------------------------------------------
if ! grep -q "169.254.169.123" /etc/chrony/chrony.conf; then
  sed -i 's/^pool .*//g' /etc/chrony/chrony.conf || true
  cat >> /etc/chrony/chrony.conf <<EOF
server 169.254.169.123 prefer iburst
makestep 1.0 3
rtcsync
EOF
fi
systemctl enable --now chrony

#--------------------------------------------------------------------
# Disable traditional Samba daemons to avoid conflicts with DC mode
#--------------------------------------------------------------------
systemctl stop smbd nmbd winbind || true
systemctl disable smbd nmbd winbind || true

#--------------------------------------------------------------------
# Provision the Domain Controller if not already provisioned
#--------------------------------------------------------------------
if [ ! -f /var/lib/samba/private/sam.ldb ]; then
  mv /etc/samba/smb.conf /etc/samba/smb.conf.bak 2>/dev/null || true
  samba-tool domain provision \
    --use-rfc2307 \
    --realm="${REALM}" \
    --domain="${NETBIOS}" \
    --server-role=dc \
    --dns-backend=SAMBA_INTERNAL \
    --host-name="${HOSTNAME_DC}" \
    --adminpass="${ADMINISTRATOR_PASS}"

  sed -i '/^\s*dns forwarder\s*=/d' /etc/samba/smb.conf
  sed -i '/^\[global\]/a dns forwarder = 169.254.169.253' /etc/samba/smb.conf
  cp /var/lib/samba/private/krb5.conf /etc/krb5.conf

  systemctl enable samba-ad-dc
  systemctl restart samba-ad-dc
fi

#--------------------------------------------------------------------
# Disable systemd-resolved to manage DNS manually
#--------------------------------------------------------------------
systemctl stop systemd-resolved || true
systemctl disable systemd-resolved || true

#--------------------------------------------------------------------
# Configure /etc/resolv.conf with local resolver and fallback
#--------------------------------------------------------------------
if [ -L /etc/resolv.conf ]; then
  rm -f /etc/resolv.conf
fi
cat > /etc/resolv.conf <<EOF
search ${DNS_ZONE}
nameserver 127.0.0.1
nameserver 169.254.169.253
EOF
chattr +i /etc/resolv.conf || true

#--------------------------------------------------------------------
# Allow services to stabilize
#--------------------------------------------------------------------
sleep 5

#--------------------------------------------------------------------
# Validate Kerberos authentication for Administrator principal
#--------------------------------------------------------------------
kinit Administrator@${REALM} <<< "${ADMINISTRATOR_PASS}" || true
klist || true
kdestroy || true

#--------------------------------------------------------------------
# Create a day-to-day Admin user with Domain Admin privileges, if needed
#--------------------------------------------------------------------
if ! samba-tool user show Admin >/dev/null 2>&1; then
  samba-tool user create Admin "${ADMIN_USER_PASS}"
  samba-tool group addmembers "Domain Admins" Admin
fi

#--------------------------------------------------------------------
# Record provisioning details and credentials for reference
#--------------------------------------------------------------------
{
  echo "==== Mini-AD Provisioned ===="
  echo "Date: $(date -Is)"
  echo "Realm: ${REALM}"
  echo "DNS Zone: ${DNS_ZONE}"
  echo "NetBIOS Domain: ${NETBIOS}"
  echo "DC Hostname: ${HOSTNAME_DC}"
  echo "DC IP: $IPV4"
  echo
  echo "Administrator password: ${ADMINISTRATOR_PASS}"
  echo "Admin (Domain Admins) password: ${ADMIN_USER_PASS}"
  echo
  echo "Useful checks:"
  echo "  samba-tool domain level show"
  echo "  samba-tool drs showrepl"
  echo "  host -t SRV _ldap._tcp.${REALM}"
  echo "  host -t SRV _kerberos._tcp.${REALM}"
} >> "$SECRETS_FILE"

#--------------------------------------------------------------------
# Create some example groups and users - suitable for use with linux
# and windows concurrently.
#--------------------------------------------------------------------

# Base gidNumber for the first group
BASE_GID=10001

# Create groups if they don't exist, incrementing gidNumber for each new one
CURRENT_GID=$BASE_GID

for group in "mcloud-users" "us" "india" "linux-admins"; do
    if ! samba-tool group show "$group" >/dev/null 2>&1; then
        echo "Creating group: $group (gidNumber=$CURRENT_GID)"
        samba-tool group add "$group" \
            --nis-domain="${NETBIOS}" \
            --gid-number="$CURRENT_GID" \
            --description="Sample Group - $group" >> /root/ad_group_attributes.log 2>&1
        ((CURRENT_GID++)) 
    fi
done

#--------------------------------------------------------------------
# Function: get_secret_password
# Reads a secret from AWS Secrets Manager
#--------------------------------------------------------------------

get_secret_password() {
    local secret_id="$1"
    aws secretsmanager get-secret-value \
        --secret-id "$secret_id" \
        --query SecretString \
        --output text | jq -r .password
}

#---------------------------------------------------------------------------------
# Function: create_ad_user
# Purpose : Creates an Active Directory user in Samba 4 and 
#           configures UNIX (RFC2307) attributes.
#
# Arguments:
#   $1  - USERNAME       (e.g., jsmith)
#   $2  - GIVENNAME      (First name, e.g., John)
#   $3  - SURNAME        (Last name, e.g., Smith)
#   $4  - PASSWORD       (User password)
#   $5  - UID_NUMBER     (Unique numeric UID for UNIX systems)
#   $6  - GID_NUMBER     (Primary group GID for UNIX systems)
#   $7  - PRIMARY_GROUP  (Name of the primary AD group)
#
# Notes:
#   - Adds user to the specified PRIMARY_GROUP.
#   - Directly sets RFC2307 attributes in LDAP (uid, uidNumber, gidNumber, etc.).
#   - Ensures the login shell and home directory are set for UNIX access.
#-----------------------------------------------------------------------------------

create_ad_user() {
    local USERNAME="$1"
    local GIVENNAME="$2"
    local SURNAME="$3"
    local PASSWORD="$4"
    local UID_NUMBER="$5"
    local GID_NUMBER="$6"
    local PRIMARY_GROUP="$7"

    DISPLAYNAME="$GIVENNAME $SURNAME"
    EMAIL="$USERNAME@${DNS_ZONE}"
    NIS_DOMAIN="${NETBIOS}"

    # 1. Create the user
    samba-tool user create "$USERNAME" "$PASSWORD" \
        --given-name="$GIVENNAME" \
        --surname="$SURNAME" \
        --mail-address="$EMAIL" \
        --description="Sample User - $DISPLAYNAME" >> /root/ad_user_attributes.log 2>&1

    # 2. Add to primary group
    samba-tool group addmembers "$PRIMARY_GROUP" "$USERNAME" >> /root/ad_user_attributes.log 2>&1

    # 3. Set Unix attributes (including uid and gid) directly in LDAP
    ldbmodify -H /var/lib/samba/private/sam.ldb <<EOF
dn: CN=$DISPLAYNAME,CN=Users,DC=mcloud,DC=mikecloud,DC=com
changetype: modify
add: objectClass
objectClass: posixAccount
-
replace: uid
uid: $USERNAME
-
replace: uidNumber
uidNumber: $UID_NUMBER
-
replace: gidNumber
gidNumber: $GID_NUMBER
-
replace: loginShell
loginShell: /bin/bash
-
replace: unixHomeDirectory
unixHomeDirectory: /home/$USERNAME
-
replace: msSFU30NisDomain
msSFU30NisDomain: $NIS_DOMAIN
EOF

    # 4. Verify attributes
    samba-tool user show "$USERNAME" | egrep "uid:|uidNumber|gidNumber|loginShell|unixHomeDirectory" >> /root/ad_user_attributes.log 2>&1
}

# Create sample domain users

create_ad_user "jsmith" "John"   "Smith"  "$(get_secret_password jsmith_ad_credentials)" "10001" "10001" "mcloud-users"
create_ad_user "edavis" "Emily"  "Davis"  "$(get_secret_password edavis_ad_credentials)" "10002" "10001" "mcloud-users"
create_ad_user "rpatel" "Raj"    "Patel"  "$(get_secret_password rpatel_ad_credentials)" "10003" "10001" "mcloud-users"
create_ad_user "akumar" "Amit"   "Kumar"  "$(get_secret_password akumar_ad_credentials)" "10004" "10001" "mcloud-users"

# Assign users to groups

samba-tool group addmembers "us"           "jsmith"  >> /root/ad_user_attributes.log 2>&1
samba-tool group addmembers "linux-admins" "jsmith"  >> /root/ad_user_attributes.log 2>&1
samba-tool group addmembers "us"           "edavis"  >> /root/ad_user_attributes.log 2>&1
samba-tool group addmembers "india"        "rpatel"  >> /root/ad_user_attributes.log 2>&1
samba-tool group addmembers "linux-admins" "rpatel"  >> /root/ad_user_attributes.log 2>&1
samba-tool group addmembers "india"        "akumar"  >> /root/ad_user_attributes.log 2>&1

#--------------------------------------------------------------------
# Signal that mini-AD initialization iscomplete
#--------------------------------------------------------------------

aws ssm put-parameter \
  --name "initialized_$DNS_ZONE" \
  --type String \
  --value "true" \
  --overwrite

#--------------------------------------------------------------------
# Reboot to ensure all changes are applied cleanly
#--------------------------------------------------------------------
reboot
